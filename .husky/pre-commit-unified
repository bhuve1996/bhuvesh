#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# 🚀 UNIFIED PRE-COMMIT HOOK - ZERO TOLERANCE FOR ERRORS/WARNINGS
# This replaces both Husky and pre-commit framework with a single, comprehensive system

echo "🔍 Running UNIFIED pre-commit checks with ZERO tolerance for warnings..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Track start time
START_TIME=$(date +%s)

# Error tracking
ERROR_COUNT=0
WARNING_COUNT=0
TOTAL_CHECKS=0

print_status() {
    echo -e "${BLUE}📝 $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
    ERROR_COUNT=$((ERROR_COUNT + 1))
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
    WARNING_COUNT=$((WARNING_COUNT + 1))
}

print_header() {
    echo -e "${PURPLE}🚀 $1${NC}"
}

print_footer() {
    echo -e "${CYAN}📊 $1${NC}"
}

# Check if --no-verify was used
if [ "$1" = "--no-verify" ] || [ "$2" = "--no-verify" ]; then
    print_warning "⚠️  BYPASSING PRE-COMMIT CHECKS WITH --no-verify"
    print_warning "⚠️  This bypasses ALL quality checks - use with caution!"
    print_warning "⚠️  Consider running checks manually: npm run pre-commit:check"
    echo ""
    print_status "To run checks manually:"
    print_status "  npm run pre-commit:check    # Quick checks"
    print_status "  npm run pre-commit:full    # Full checks"
    echo ""
    exit 0
fi

print_header "UNIFIED PRE-COMMIT SYSTEM - ZERO TOLERANCE MODE"
echo ""

# =============================================================================
# PHASE 1: BASIC FILE CHECKS (from pre-commit framework)
# =============================================================================
print_header "PHASE 1: Basic File Checks"

# 1. Trailing whitespace check
print_status "1.1. Checking for trailing whitespace..."
if git diff --cached --name-only | grep -E '\.(ts|tsx|js|jsx|json|css|md|py)$' | xargs grep -l '[[:space:]]$' 2>/dev/null; then
    print_error "Trailing whitespace found. Please remove trailing spaces."
    print_status "Fix with: sed -i 's/[[:space:]]*$//' <file>"
    exit 1
fi
print_success "1.1. No trailing whitespace found"

# 2. End of file fixer
print_status "1.2. Checking end of files..."
MISSING_NEWLINE=$(git diff --cached --name-only | grep -E '\.(ts|tsx|js|jsx|json|css|md|py)$' | xargs -I {} sh -c 'if [ -s "{}" ] && [ "$(tail -c1 "{}" | wc -l)" -eq 0 ]; then echo "{}"; fi')
if [ -n "$MISSING_NEWLINE" ]; then
    print_error "Files missing newline at end: $MISSING_NEWLINE"
    print_status "Fix with: echo >> <file>"
    exit 1
fi
print_success "1.2. All files have proper endings"

# 3. Large files check
print_status "1.3. Checking for large files..."
LARGE_FILES=$(git diff --cached --name-only | xargs -I {} sh -c 'if [ -f "{}" ] && [ $(stat -f%z "{}" 2>/dev/null || stat -c%s "{}" 2>/dev/null || echo 0) -gt 1048576 ]; then echo "{}"; fi')
if [ -n "$LARGE_FILES" ]; then
    print_error "Large files detected (>1MB): $LARGE_FILES"
    print_status "Consider using Git LFS for large files"
    exit 1
fi
print_success "1.3. No large files detected"

# 4. Merge conflict check
print_status "1.4. Checking for merge conflicts..."
if git diff --cached --name-only | xargs grep -l '^<<<<<<< \|^======= \|^>>>>>>> ' 2>/dev/null; then
    print_error "Merge conflict markers found in staged files"
    exit 1
fi
print_success "1.4. No merge conflicts detected"

TOTAL_CHECKS=$((TOTAL_CHECKS + 4))

# =============================================================================
# PHASE 2: FRONTEND CHECKS
# =============================================================================
print_header "PHASE 2: Frontend Quality Checks"

# 5. TypeScript type checking (REQUIRED - will block commit if fails)
print_status "2.1. TypeScript type checking (main source files only)..."
npm run type-check:main
if [ $? -ne 0 ]; then
    print_error "Type checking failed. Please fix TypeScript errors in main source files before committing."
    print_status "Run: npm run type-check:main"
    exit 1
fi
print_success "2.1. TypeScript type checking passed"

# 6. ESLint linting (REQUIRED - will block commit if fails)
print_status "2.2. ESLint code linting..."
npm run lint
if [ $? -ne 0 ]; then
    print_error "Linting failed. Please fix ALL linting errors and warnings before committing."
    print_status "Run: npm run lint:fix"
    exit 1
fi
print_success "2.2. ESLint linting passed"

# 7. Code formatting (REQUIRED - will block commit if fails)
print_status "2.3. Prettier code formatting check..."
npm run format:check
if [ $? -ne 0 ]; then
    print_error "Code formatting check failed. Please run 'npm run format' to fix formatting issues before committing."
    exit 1
fi
print_success "2.3. Code formatting check passed"

TOTAL_CHECKS=$((TOTAL_CHECKS + 3))

# =============================================================================
# PHASE 3: TESTING CHECKS
# =============================================================================
print_header "PHASE 3: Testing & Quality Assurance"

# 8. Unit tests (REQUIRED - will block commit if fails)
print_status "3.1. Unit tests (Jest)..."
npm run test:ci
if [ $? -ne 0 ]; then
    print_error "Unit tests failed. Please fix ALL failing tests before committing."
    print_status "Run: npm run test:ci"
    exit 1
fi
print_success "3.1. Unit tests passed"

# 9. Accessibility tests (REQUIRED - will block commit if fails)
print_status "3.2. Accessibility tests (jest-axe)..."
npm run test:a11y
if [ $? -ne 0 ]; then
    print_error "Accessibility tests failed. Please fix ALL accessibility issues before committing."
    print_status "Run: npm run test:a11y"
    exit 1
fi
print_success "3.2. Accessibility tests passed"

TOTAL_CHECKS=$((TOTAL_CHECKS + 2))

# =============================================================================
# PHASE 4: BACKEND CHECKS (if backend files changed)
# =============================================================================
BACKEND_FILES=$(git diff --cached --name-only | grep '^backend/.*\.py$' || true)
if [ -n "$BACKEND_FILES" ]; then
    print_header "PHASE 4: Backend Quality Checks"
    
    print_status "4.1. Python backend files detected, checking..."
    
    # Check if Python environment exists
    if [ -d "backend/venv" ]; then
        # 10. Black formatting
        print_status "4.2. Black code formatting..."
        cd backend && source venv/bin/activate && black --check --diff . 2>/dev/null
        if [ $? -ne 0 ]; then
            print_error "Black formatting check failed. Please format Python code."
            print_status "Run: cd backend && source venv/bin/activate && black ."
            exit 1
        fi
        print_success "4.2. Black formatting passed"
        
        # 11. isort import sorting
        print_status "4.3. isort import sorting..."
        isort --check-only --diff . 2>/dev/null
        if [ $? -ne 0 ]; then
            print_error "isort import sorting failed. Please sort imports."
            print_status "Run: cd backend && source venv/bin/activate && isort ."
            exit 1
        fi
        print_success "4.3. isort import sorting passed"
        
        # 12. Ruff linting
        print_status "4.4. Ruff linting..."
        ruff check . 2>/dev/null
        if [ $? -ne 0 ]; then
            print_error "Ruff linting failed. Please fix Python linting issues."
            print_status "Run: cd backend && source venv/bin/activate && ruff check --fix ."
            exit 1
        fi
        print_success "4.4. Ruff linting passed"
        
        cd ..
        TOTAL_CHECKS=$((TOTAL_CHECKS + 3))
    else
        print_warning "4.1. Backend files detected but no virtual environment found"
        print_status "Skipping backend checks. Set up backend environment for full checks."
    fi
fi

# =============================================================================
# PHASE 5: BUILD VERIFICATION
# =============================================================================
print_header "PHASE 5: Build Verification"

# 13. Build check (REQUIRED - will block commit if fails)
print_status "5.1. Next.js build verification..."
npm run build
if [ $? -ne 0 ]; then
    print_error "Build failed. Please fix build errors before committing."
    print_status "Run: npm run build"
    exit 1
fi
print_success "5.1. Next.js build verification passed"

TOTAL_CHECKS=$((TOTAL_CHECKS + 1))

# =============================================================================
# SUCCESS REPORTING
# =============================================================================
END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))

echo ""
print_header "🎉 ALL CHECKS PASSED - ZERO ERRORS/WARNINGS!"
print_footer "📊 PERFORMANCE SUMMARY:"
print_success "   ✅ TOTAL CHECKS RUN: $TOTAL_CHECKS"
print_success "   ✅ ERRORS: $ERROR_COUNT"
print_success "   ✅ WARNINGS: $WARNING_COUNT"
print_success "   ⏱️  DURATION: ${DURATION}s"
print_success "   🚫 ZERO TOLERANCE: ACHIEVED"

echo ""
print_success "📋 QUALITY GATES PASSED:"
print_success "   ✅ File Quality (trailing whitespace, endings, size, conflicts)"
print_success "   ✅ TypeScript Type Safety"
print_success "   ✅ ESLint Code Quality"
print_success "   ✅ Prettier Formatting"
print_success "   ✅ Unit Tests"
print_success "   ✅ Accessibility Tests"
if [ -n "$BACKEND_FILES" ]; then
    print_success "   ✅ Backend Quality (Black, isort, Ruff)"
fi
print_success "   ✅ Build Verification"

echo ""
print_success "🚀 COMMIT APPROVED - Code meets highest quality standards!"
print_success "💡 This unified system replaces both Husky and pre-commit framework"
print_success "🔧 Use --no-verify to bypass (not recommended)"

# Log successful run
echo "$(date): Pre-commit passed - $TOTAL_CHECKS checks, ${DURATION}s" >> .git/hooks/pre-commit.log 2>/dev/null || true
