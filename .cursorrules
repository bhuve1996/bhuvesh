# Cursor Rules for Bhuvesh Portfolio Project

## Project Overview
This is a Next.js 15 portfolio website with TypeScript, Tailwind CSS, and a well-organized component structure.

## Tech Stack
- **Framework**: Next.js 15 with App Router
- **Language**: TypeScript
- **Styling**: Tailwind CSS
- **Animations**: Framer Motion
- **Build Tool**: Turbopack

## Project Structure
```
src/
├── app/                    # Next.js App Router pages
├── components/             # Reusable React components
│   ├── ui/                # UI components (Button, Card, Section, Loading, SVG)
│   ├── layout/            # Layout components (Navigation)
│   └── sections/          # Page sections (Hero, About, Projects, Contact)
├── lib/                   # Utility functions and data
├── types/                 # TypeScript type definitions
└── assets/               # Static assets
```

## Coding Standards

### TypeScript
- Always use TypeScript for all files
- Define proper interfaces and types in `/types/index.ts`
- Use strict type checking
- Prefer interfaces over types for object shapes
- Export types from a central location

### React Components
- Use functional components with hooks
- Always define proper prop types
- Use React.FC for component typing
- Keep components small and focused
- Use descriptive component names

### File Naming
- Use PascalCase for component files: `Button.tsx`
- Use camelCase for utility files: `data.ts`
- Use kebab-case for page routes: `page.tsx`

### Import Organization
1. React imports first
2. Third-party libraries
3. Internal components (use absolute imports with `@/`)
4. Types and utilities
5. Relative imports last

### Component Structure
```tsx
import React from 'react';
import { ComponentProps } from '@/types';

interface ComponentNameProps {
  // Define props here
}

export const ComponentName: React.FC<ComponentNameProps> = ({
  // Destructure props
}) => {
  // Component logic
  
  return (
    // JSX
  );
};

export default ComponentName;
```

### Styling Guidelines
- Use Tailwind CSS classes
- Follow mobile-first responsive design
- Use consistent color scheme (cyan-400, blue-500, etc.)
- Use backdrop-blur and glassmorphism effects
- Maintain consistent spacing and typography

### Data Management
- Store all static data in `/lib/data.ts`
- Use TypeScript interfaces for data structures
- Keep data separate from components
- Use descriptive variable names

### SVG Icons
- Use the custom SVG component system
- Add new icons to the `Icons` object in `SVG.tsx`
- Use consistent sizing (w-6 h-6, w-5 h-5, etc.)
- Prefer stroke icons over filled when possible

## Best Practices

### Performance
- Use dynamic imports for large components
- Optimize images and assets
- Use React.memo for expensive components
- Implement proper loading states

### Accessibility
- Use semantic HTML elements
- Add proper ARIA labels
- Ensure keyboard navigation
- Maintain color contrast ratios

### Code Quality
- Write self-documenting code
- Use meaningful variable and function names
- Keep functions small and focused
- Add comments for complex logic
- Follow DRY (Don't Repeat Yourself) principle

### Git Workflow
- Use descriptive commit messages
- Create feature branches for new features
- Keep commits atomic and focused
- Use conventional commit format when possible

## Component Guidelines

### UI Components
- Make components reusable and configurable
- Use consistent prop interfaces
- Provide sensible defaults
- Support className overrides

### Layout Components
- Keep layout components flexible
- Use CSS Grid and Flexbox appropriately
- Ensure responsive behavior
- Handle mobile navigation properly

### Section Components
- Keep sections focused on single responsibility
- Use consistent spacing and styling
- Make sections reusable across pages
- Handle data through props or data imports

## Development Commands
```bash
npm run dev          # Start development server
npm run build        # Build for production
npm run start        # Start production server
npm run lint         # Run ESLint
npm run lint:fix     # Fix ESLint errors
npm run format       # Format code with Prettier
```

## File Organization Rules
- Keep related files together
- Use index.ts files for clean exports
- Group components by functionality
- Separate concerns (UI, logic, data)

## Error Handling
- Use proper error boundaries
- Handle loading and error states
- Provide meaningful error messages
- Log errors appropriately

## Testing Considerations
- Write testable components
- Keep business logic separate from UI
- Use proper prop validation
- Consider accessibility testing

## Performance Considerations
- Optimize bundle size
- Use code splitting appropriately
- Minimize re-renders
- Optimize images and assets

## Security
- Sanitize user inputs
- Use proper authentication patterns
- Follow Next.js security best practices
- Keep dependencies updated

Remember: This is a portfolio website, so focus on clean code, good performance, and excellent user experience. The code should be maintainable and showcase best practices.
