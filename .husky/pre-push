#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "üîç Running pre-push checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}üìù $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# 1. Type checking
print_status "Type checking..."
npm run type-check
if [ $? -ne 0 ]; then
    print_error "Type checking failed. Please fix TypeScript errors before pushing."
    exit 1
fi
print_success "Type checking passed"

# 2. Linting
print_status "Linting code..."
npm run lint
if [ $? -ne 0 ]; then
    print_error "Linting failed. Please fix linting errors before pushing."
    exit 1
fi
print_success "Linting passed"

# 3. Code formatting
print_status "Checking code formatting..."
npm run format:check
if [ $? -ne 0 ]; then
    print_error "Code formatting check failed. Please run 'npm run format' to fix formatting issues."
    exit 1
fi
print_success "Code formatting check passed"

# 4. Unit tests
print_status "Running unit tests..."
npm run test:ci
if [ $? -ne 0 ]; then
    print_error "Unit tests failed. Please fix failing tests before pushing."
    exit 1
fi
print_success "Unit tests passed"

# 5. Accessibility tests
print_status "Running accessibility tests..."
npm run test:a11y
if [ $? -ne 0 ]; then
    print_error "Accessibility tests failed. Please fix accessibility issues before pushing."
    exit 1
fi
print_success "Accessibility tests passed"

# 6. Build check
print_status "Checking build..."
npm run build -- --no-lint
if [ $? -ne 0 ]; then
    print_error "Build failed. Please fix build errors before pushing."
    exit 1
fi
print_success "Build check passed"

print_success "All pre-push checks passed! Proceeding with push..."