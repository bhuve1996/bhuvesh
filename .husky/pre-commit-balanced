#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "üîç Running balanced pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}üìù $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# 1. Type checking (critical)
print_status "Type checking..."
npm run type-check
if [ $? -ne 0 ]; then
    print_error "Type checking failed. Please fix TypeScript errors before committing."
    exit 1
fi
print_success "Type checking passed"

# 2. Basic linting (critical errors only)
print_status "Running critical linting checks..."
npm run lint -- --quiet --max-warnings 0
if [ $? -ne 0 ]; then
    print_warning "Linting issues found, but allowing commit to proceed."
    print_warning "Please fix linting issues when convenient."
fi

# 3. Code formatting
print_status "Checking code formatting..."
npm run format:check
if [ $? -ne 0 ]; then
    print_warning "Code formatting issues found."
    print_status "Auto-fixing formatting issues..."
    npm run format
    print_success "Code formatting fixed"
else
    print_success "Code formatting check passed"
fi

# 4. Unit tests (critical)
print_status "Running unit tests..."
npm run test:ci
if [ $? -ne 0 ]; then
    print_error "Unit tests failed. Please fix failing tests before committing."
    exit 1
fi
print_success "Unit tests passed"

# 5. Build check (critical)
print_status "Checking build..."
npm run build
if [ $? -ne 0 ]; then
    print_error "Build failed. Please fix build errors before committing."
    exit 1
fi
print_success "Build check passed"

print_success "Balanced pre-commit checks passed! Proceeding with commit..."
print_warning "Note: Some linting issues may remain. Fix them when convenient."
