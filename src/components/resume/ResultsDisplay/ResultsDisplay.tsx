'use client';

import React, { useCallback, useState } from 'react';

import { ImprovementPlan } from '@/components/resume/ImprovementPlan';
import { Card } from '@/components/ui/Card';
import type { AnalysisResult, ImprovementItem } from '@/types';

import { AnalysisDataDisplay } from './AnalysisDataDisplay';
import { ParsedDataDisplay } from './ParsedDataDisplay';

interface ResultsDisplayProps {
  result: AnalysisResult;
  onTryAgain?: () => void;
}

export const ResultsDisplay: React.FC<ResultsDisplayProps> = ({ result }) => {
  const [improvementPlan, setImprovementPlan] = useState<{
    improvements: ImprovementItem[];
    summary: {
      total_improvements: number;
      high_priority: number;
      estimated_impact: number;
      estimated_time: string;
    };
    quick_wins: ImprovementItem[];
  } | null>(null);
  const [loadingImprovements, setLoadingImprovements] = useState(false);
  const [showDetailedAnalysis, setShowDetailedAnalysis] = useState(false);
  const [showParsedData, setShowParsedData] = useState(false);

  const fetchImprovementPlan = useCallback(async () => {
    if (!result.extraction_details) return;

    setLoadingImprovements(true);
    try {
      const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';
      const response = await fetch(`${apiUrl}/api/upload/improvement-plan`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          analysis_result: result,
          extracted_data: result.extraction_details,
          job_description: null,
        }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          setImprovementPlan(data.data);
        }
      }
    } catch {
      // Silently fail - improvement plan is optional
    } finally {
      setLoadingImprovements(false);
    }
  }, [result]);

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-400';
    if (score >= 60) return 'text-yellow-400';
    return 'text-red-400';
  };

  const getScoreBgColor = (score: number) => {
    if (score >= 80) return 'bg-green-500/20 border-green-500/30';
    if (score >= 60) return 'bg-yellow-500/20 border-yellow-500/30';
    return 'bg-red-500/20 border-red-500/30';
  };

  const getScoreGrade = (score: number) => {
    if (score >= 90) return 'A+';
    if (score >= 80) return 'A';
    if (score >= 70) return 'B';
    if (score >= 60) return 'C';
    if (score >= 50) return 'D';
    return 'F';
  };

  return (
    <div className='space-y-6'>
      {/* Header */}
      <div className='text-center'>
        <h2 className='text-3xl font-bold mb-2 text-white'>
          Analysis Complete
        </h2>
        <p className='text-gray-300'>
          Detected job type:{' '}
          <span className='text-cyan-400 font-medium'>{result.jobType}</span>
        </p>
      </div>

      {/* AI-Generated Job Description */}
      {result.job_description && (
        <Card className='p-6'>
          <h3 className='text-xl font-bold mb-4 text-purple-400'>
            ðŸ¤– AI-Generated Job Description
          </h3>
          <div className='bg-gray-800/50 rounded-lg p-4 border border-gray-700'>
            <p className='text-gray-300 leading-relaxed whitespace-pre-wrap'>
              {result.job_description}
            </p>
          </div>
          <p className='text-sm text-gray-400 mt-3'>
            This job description was automatically generated by AI based on your
            resume content and industry standards for your detected role.
          </p>
        </Card>
      )}

      {/* Enhanced ATS Score Display */}
      <Card className='p-6'>
        <div className='text-center'>
          <h3 className='text-xl font-bold mb-4 text-white'>
            ATS Compatibility Score
          </h3>
          <div
            className={`inline-flex items-center justify-center w-32 h-32 rounded-full border-4 ${getScoreBgColor(result.atsScore)}`}
          >
            <span
              className={`text-4xl font-bold ${getScoreColor(result.atsScore)}`}
            >
              {result.atsScore}
            </span>
          </div>
          <div className='text-xl text-gray-300 mb-4'>
            Grade:{' '}
            <span className={`font-bold ${getScoreColor(result.atsScore)}`}>
              {getScoreGrade(result.atsScore)}
            </span>
          </div>
          <p className='text-gray-300 mt-4'>
            {result.atsScore >= 80 &&
              'Excellent! Your resume is highly ATS-compatible.'}
            {result.atsScore >= 60 &&
              result.atsScore < 80 &&
              'Good! Your resume has good ATS compatibility with room for improvement.'}
            {result.atsScore < 60 &&
              result.atsScore >= 0 &&
              'Your resume needs improvements for better ATS compatibility.'}
          </p>

          {/* Enhanced Analysis Grades */}
          {result.ats_compatibility && (
            <div className='mt-6 grid grid-cols-2 gap-4'>
              <div className='text-center'>
                <p className='text-sm text-gray-400 mb-1'>ATS Compatibility</p>
                <p className='text-lg font-semibold text-cyan-400'>
                  {getScoreGrade(result.atsScore)}
                </p>
              </div>
              <div className='text-center'>
                <p className='text-sm text-gray-400 mb-1'>Format Structure</p>
                <p className='text-lg font-semibold text-blue-400'>
                  {result.format_analysis?.grade || 'N/A'}
                </p>
              </div>
            </div>
          )}

          {/* Detailed Scores */}
          {result.detailed_scores && (
            <div className='mt-6 grid grid-cols-2 md:grid-cols-4 gap-4'>
              <div className='text-center'>
                <p className='text-sm text-gray-400 mb-1'>Keyword Score</p>
                <p className='text-lg font-semibold text-blue-400'>
                  {result.detailed_scores.keyword_score || 0}%
                </p>
              </div>
              <div className='text-center'>
                <p className='text-sm text-gray-400 mb-1'>Semantic Score</p>
                <p className='text-lg font-semibold text-purple-400'>
                  {result.detailed_scores.semantic_score || 0}%
                </p>
              </div>
              <div className='text-center'>
                <p className='text-sm text-gray-400 mb-1'>Format Score</p>
                <p className='text-lg font-semibold text-green-400'>
                  {result.detailed_scores.format_score || 0}%
                </p>
              </div>
              <div className='text-center'>
                <p className='text-sm text-gray-400 mb-1'>Content Score</p>
                <p className='text-lg font-semibold text-yellow-400'>
                  {result.detailed_scores.content_score || 0}%
                </p>
              </div>
            </div>
          )}

          {/* Match Category */}
          {result.match_category && (
            <div className='mt-4'>
              <p className='text-sm text-gray-400 mb-1'>Match Category</p>
              <p className='text-lg font-semibold text-cyan-400'>
                {result.match_category}
              </p>
            </div>
          )}

          {/* Semantic Similarity */}
          {result.semantic_similarity && (
            <div className='mt-4'>
              <p className='text-sm text-gray-400 mb-1'>Semantic Similarity</p>
              <p className='text-lg font-semibold text-purple-400'>
                {Math.round(result.semantic_similarity * 100)}%
              </p>
            </div>
          )}
        </div>
      </Card>

      {/* Parsed Data Summary */}
      <Card className='p-6'>
        <h3 className='text-xl font-bold mb-4 text-white'>ðŸ“‹ Resume Summary</h3>
        <div className='grid md:grid-cols-3 gap-6'>
          <div className='text-center'>
            <p className='text-sm text-gray-400 mb-1'>Job Type Detected</p>
            <p className='text-lg font-semibold text-cyan-400'>
              {result.jobType}
            </p>
          </div>
          <div className='text-center'>
            <p className='text-sm text-gray-400 mb-1'>Keyword Matches</p>
            <p className='text-lg font-semibold text-green-400'>
              {result.keywordMatches.length}
            </p>
          </div>
          <div className='text-center'>
            <p className='text-sm text-gray-400 mb-1'>Missing Keywords</p>
            <p className='text-lg font-semibold text-red-400'>
              {result.missingKeywords.length}
            </p>
          </div>
        </div>
        <div className='mt-4 text-center'>
          <p className='text-gray-300'>
            {result.atsScore >= 80 &&
              'Your resume shows excellent ATS compatibility!'}
            {result.atsScore >= 60 &&
              result.atsScore < 80 &&
              'Your resume has good ATS compatibility with room for improvement.'}
            {result.atsScore < 60 &&
              'Your resume needs improvements for better ATS compatibility.'}
          </p>
        </div>
      </Card>

      {/* Action Buttons */}
      <div className='flex flex-col sm:flex-row gap-4 justify-center'>
        <button
          onClick={() => setShowParsedData(!showParsedData)}
          className='px-8 py-3 text-lg bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white rounded-lg font-medium transition-all duration-300 transform hover:scale-105 shadow-lg'
        >
          {showParsedData ? (
            <span className='flex items-center gap-2'>ðŸ“„ Hide Parsed Data</span>
          ) : (
            <span className='flex items-center gap-2'>ðŸ“„ Show Parsed Data</span>
          )}
        </button>

        <button
          onClick={() => setShowDetailedAnalysis(!showDetailedAnalysis)}
          className='px-8 py-3 text-lg bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white rounded-lg font-medium transition-all duration-300 transform hover:scale-105 shadow-lg'
        >
          {showDetailedAnalysis ? (
            <span className='flex items-center gap-2'>
              ðŸ“Š Hide Analysis Details
            </span>
          ) : (
            <span className='flex items-center gap-2'>
              ðŸ“ˆ View Analysis Details
            </span>
          )}
        </button>
      </div>

      {/* Parsed Data - Only show when button is clicked */}
      {showParsedData && <ParsedDataDisplay result={result} />}

      {/* Analysis Data - Only show when button is clicked */}
      {showDetailedAnalysis && <AnalysisDataDisplay result={result} />}

      {/* Improvement Plan Section */}
      <div className='text-center mb-6'>
        {!improvementPlan && (
          <button
            onClick={fetchImprovementPlan}
            disabled={loadingImprovements}
            className='px-8 py-3 text-lg bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 disabled:opacity-50 disabled:cursor-not-allowed text-white rounded-lg font-medium transition-all duration-300 transform hover:scale-105 shadow-lg'
          >
            {loadingImprovements ? (
              <span className='flex items-center gap-2'>
                <div className='w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin'></div>
                Generating Plan...
              </span>
            ) : (
              <span className='flex items-center gap-2'>
                ðŸ“ˆ Get Detailed Improvement Plan
              </span>
            )}
          </button>
        )}
      </div>

      {/* Improvement Plan Display */}
      {improvementPlan && (
        <div className='mb-8'>
          <ImprovementPlan
            improvements={improvementPlan.improvements}
            summary={improvementPlan.summary}
            quick_wins={improvementPlan.quick_wins}
            currentScore={result.atsScore}
          />
        </div>
      )}

      {/* Action Buttons - Commented out as they are not functional yet */}
      {/* <div className='text-center space-x-4'>
        <button className='px-6 py-3 bg-gradient-to-r from-cyan-400 to-blue-500 text-white rounded-lg hover:from-cyan-500 hover:to-blue-600 transition-all font-medium'>
          Download Report
        </button>
        <button className='px-6 py-3 border border-gray-600 text-gray-300 rounded-lg hover:border-gray-500 hover:text-white transition-all font-medium'>
          Analyze Another Resume
        </button>
      </div> */}
    </div>
  );
};
